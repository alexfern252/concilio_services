# listening server port
server.port=8089
# not allow spring batch job run at the starting up
spring.batch.job.enabled=false

# file path resources
file_path_csv_user=classpath:csv/users.csv
file_path_csv_trades=classpath:csv/trades.csv
rest.api.to.database.job.api.url=http://localhost:8089/student

spring.cache.cache-names=customers
app.customer.jpa.properties.hibernate.hbm2ddl.auto=create
app.customer.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# H2 datasource persistence config
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# enable spring jpa hibernate ddl-auto update
#Here spring.jpa.hibernate.ddl-auto=update does the trick. Nothing else is required.
#No need to add spring-boot-starter-jdbc in pom.xml
#No need to add any parameter in jdbc url.
spring.jpa.hibernate.ddl-auto=none

# auto create tables if not exited
spring.jpa.generate-ddl=true
spring.batch.initialize-schema=always

# avoid error: org.postgresql.jdbc.PgConnection.createClob() is not yet implemented
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

#spring.jpa.properties.hibernate.show_sql=false
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.type=trace
#spring.jpa.show-sql=true
#logging.level.org.hibernate=TRACE

#Hibernate Configuration
hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect
hibernate.hbm2ddl.auto=none
hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
hibernate.show_sql=true
hibernate.format_sql=true

#validate: validate that the schema matches, make no changes to the schema of the database, you probably want this for production.
#update: update the schema to reflect the entities being persisted
#create: creates the schema necessary for your entities, destroying any previous data.
#create-drop: create the schema as in create above, but also drop the schema at the end of the session. This is great in early development or for testing.

#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

# log
logging.file=target/log/concilio.log

hibernate.connection.provider_disables_autocommit=true

#hibernate.c3p0.min_size – Minimum number of JDBC connections in the pool. Hibernate default: 1
#hibernate.c3p0.max_size – Maximum number of JDBC connections in the pool. Hibernate default: 100
#hibernate.c3p0.timeout – When an idle connection is removed from the pool (in second). Hibernate default: 0, never expire.
#hibernate.c3p0.max_statements – Number of prepared statements will be cached. Increase performance. Hibernate default: 0 , caching is disable.
#hibernate.c3p0.idle_test_period – idle time in seconds before a connection is automatically validated. Hibernate default: 0
#hibernate.c3p0.min_size=5
#hibernate.c3p0.max_size=20
#hibernate.c3p0.acquire_increment=5
#hibernate.c3p0.timeout=300
#hibernate.c3p0.max_statements=50
#hibernate.c3p0.idle_test_period=200